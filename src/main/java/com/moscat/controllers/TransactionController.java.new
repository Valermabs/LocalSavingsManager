package com.moscat.controllers;

import com.moscat.models.Transaction;
import com.moscat.models.TransactionSummary;
import com.moscat.utils.DatabaseManager;
import com.moscat.utils.DateUtils;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Date;

/**
 * Controller for transaction operations
 */
public class TransactionController {
    
    /**
     * Record a new transaction
     * 
     * @param transaction The transaction to record
     * @return True if successful, false otherwise
     */
    public static boolean recordTransaction(Transaction transaction) {
        // Generate reference number if not provided
        if (transaction.getReferenceNumber() == null || transaction.getReferenceNumber().isEmpty()) {
            transaction.setReferenceNumber(generateReferenceNumber());
        }
        
        // Set transaction date if not provided
        if (transaction.getTransactionDate() == null) {
            transaction.setTransactionDate(LocalDateTime.now());
        }
        
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "INSERT INTO transactions (member_id, account_id, reference_number, transaction_type, " +
                    "amount, running_balance, transaction_date, description, processed_by, transaction_by) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, transaction.getMemberId());
            stmt.setInt(2, transaction.getAccountId());
            stmt.setString(3, transaction.getReferenceNumber());
            stmt.setString(4, transaction.getTransactionType());
            stmt.setDouble(5, transaction.getAmount());
            stmt.setDouble(6, transaction.getRunningBalance());
            stmt.setString(7, DateUtils.formatLocalDateTime(transaction.getTransactionDate()));
            stmt.setString(8, transaction.getDescription());
            stmt.setString(9, transaction.getProcessedBy());
            stmt.setInt(10, transaction.getTransactionBy());
            
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * Get a transaction by ID
     * 
     * @param transactionId The transaction ID
     * @return The transaction, or null if not found
     */
    public static Transaction getTransactionById(int transactionId) {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT * FROM transactions WHERE id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, transactionId);
            
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                return mapResultSetToTransaction(rs);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return null;
    }
    
    /**
     * Get transactions for a specific account
     * 
     * @param accountId The account ID
     * @param limit The maximum number of transactions to retrieve (0 for all)
     * @return List of transactions
     */
    public static List<Transaction> getAccountTransactions(int accountId, int limit) {
        List<Transaction> transactions = new ArrayList<>();
        
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT * FROM transactions WHERE account_id = ? ORDER BY transaction_date DESC";
            if (limit > 0) {
                sql += " LIMIT ?";
            }
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, accountId);
            if (limit > 0) {
                stmt.setInt(2, limit);
            }
            
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                transactions.add(mapResultSetToTransaction(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return transactions;
    }
    
    /**
     * Get transactions for a specific date range
     * 
     * @param startDate Start date in format "yyyy-MM-dd"
     * @param endDate End date in format "yyyy-MM-dd"
     * @return List of transactions
     */
    public static List<Transaction> getTransactionsByDateRange(String startDate, String endDate) {
        List<Transaction> transactions = new ArrayList<>();
        
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT * FROM transactions WHERE DATE(transaction_date) BETWEEN ? AND ? " +
                    "ORDER BY transaction_date DESC";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                transactions.add(mapResultSetToTransaction(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return transactions;
    }
    
    /**
     * Get a summary of transactions for a specific date
     * 
     * @param date Date in format "yyyy-MM-dd"
     * @return List of transaction summaries by type
     */
    public static List<TransactionSummary> getDailyTransactionSummary(String date) {
        Map<String, TransactionSummary> summaries = new HashMap<>();
        
        // Initialize with known transaction types
        summaries.put("SAVINGS_DEPOSIT", new TransactionSummary("SAVINGS_DEPOSIT"));
        summaries.put("SAVINGS_WITHDRAWAL", new TransactionSummary("SAVINGS_WITHDRAWAL"));
        summaries.put("INTEREST_EARNED", new TransactionSummary("INTEREST_EARNED"));
        summaries.put("LOAN_DISBURSEMENT", new TransactionSummary("LOAN_DISBURSEMENT"));
        summaries.put("LOAN_PAYMENT", new TransactionSummary("LOAN_PAYMENT"));
        summaries.put("SERVICE_FEE", new TransactionSummary("SERVICE_FEE"));
        summaries.put("MEMBERSHIP_FEE", new TransactionSummary("MEMBERSHIP_FEE"));
        summaries.put("PENALTY", new TransactionSummary("PENALTY"));
        
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT transaction_type, SUM(amount) as total_amount, COUNT(*) as count " +
                    "FROM transactions WHERE DATE(transaction_date) = ? " +
                    "GROUP BY transaction_type";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, date);
            
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                String type = rs.getString("transaction_type");
                double totalAmount = rs.getDouble("total_amount");
                int count = rs.getInt("count");
                
                TransactionSummary summary = new TransactionSummary(type, totalAmount, count);
                summaries.put(type, summary);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return new ArrayList<>(summaries.values());
    }
    
    /**
     * Get a summary of transactions for a specific month
     * 
     * @param year The year
     * @param month The month (1-12)
     * @return List of transaction summaries by type
     */
    public static List<TransactionSummary> getMonthlyTransactionSummary(int year, int month) {
        Map<String, TransactionSummary> summaries = new HashMap<>();
        
        // Initialize with known transaction types
        summaries.put("SAVINGS_DEPOSIT", new TransactionSummary("SAVINGS_DEPOSIT"));
        summaries.put("SAVINGS_WITHDRAWAL", new TransactionSummary("SAVINGS_WITHDRAWAL"));
        summaries.put("INTEREST_EARNED", new TransactionSummary("INTEREST_EARNED"));
        summaries.put("LOAN_DISBURSEMENT", new TransactionSummary("LOAN_DISBURSEMENT"));
        summaries.put("LOAN_PAYMENT", new TransactionSummary("LOAN_PAYMENT"));
        summaries.put("SERVICE_FEE", new TransactionSummary("SERVICE_FEE"));
        summaries.put("MEMBERSHIP_FEE", new TransactionSummary("MEMBERSHIP_FEE"));
        summaries.put("PENALTY", new TransactionSummary("PENALTY"));
        
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT transaction_type, SUM(amount) as total_amount, COUNT(*) as count " +
                    "FROM transactions WHERE YEAR(transaction_date) = ? AND MONTH(transaction_date) = ? " +
                    "GROUP BY transaction_type";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, year);
            stmt.setInt(2, month);
            
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                String type = rs.getString("transaction_type");
                double totalAmount = rs.getDouble("total_amount");
                int count = rs.getInt("count");
                
                TransactionSummary summary = new TransactionSummary(type, totalAmount, count);
                summaries.put(type, summary);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return new ArrayList<>(summaries.values());
    }
    
    /**
     * Generate a unique transaction reference number
     * 
     * @return The generated reference number
     */
    private static String generateReferenceNumber() {
        // Format: "TR" + First 8 characters of UUID (uppercase)
        String uuid = UUID.randomUUID().toString().substring(0, 8).toUpperCase();
        return "TR" + uuid;
    }
    
    /**
     * Map a ResultSet to a Transaction object
     * 
     * @param rs The ResultSet to map
     * @return The mapped Transaction
     * @throws SQLException If mapping fails
     */
    private static Transaction mapResultSetToTransaction(ResultSet rs) throws SQLException {
        Transaction transaction = new Transaction();
        transaction.setId(rs.getInt("id"));
        transaction.setMemberId(rs.getInt("member_id"));
        transaction.setAccountId(rs.getInt("account_id"));
        transaction.setReferenceNumber(rs.getString("reference_number"));
        transaction.setTransactionType(rs.getString("transaction_type"));
        transaction.setAmount(rs.getDouble("amount"));
        transaction.setRunningBalance(rs.getDouble("running_balance"));
        
        String transactionDateStr = rs.getString("transaction_date");
        if (transactionDateStr != null && !transactionDateStr.isEmpty()) {
            transaction.setTransactionDate(DateUtils.parseLocalDateTime(transactionDateStr));
        }
        
        transaction.setDescription(rs.getString("description"));
        transaction.setProcessedBy(rs.getString("processed_by"));
        
        // Add the transaction_by field if it exists in the ResultSet
        try {
            transaction.setTransactionBy(rs.getInt("transaction_by"));
        } catch (SQLException e) {
            // Ignore if the column doesn't exist
        }
        
        return transaction;
    }
    
    /**
     * Helper method for TransactionSummary to add deposit amount
     * 
     * @param summary The TransactionSummary to update
     * @param amount The amount to add
     */
    public static void addDeposit(TransactionSummary summary, double amount) {
        summary.setTransactionType("SAVINGS_DEPOSIT");
        summary.addTransaction(amount);
    }
    
    /**
     * Helper method for TransactionSummary to add withdrawal amount
     * 
     * @param summary The TransactionSummary to update
     * @param amount The amount to add
     */
    public static void addWithdrawal(TransactionSummary summary, double amount) {
        summary.setTransactionType("SAVINGS_WITHDRAWAL");
        summary.addTransaction(amount);
    }
    
    /**
     * Helper method for TransactionSummary to add interest amount
     * 
     * @param summary The TransactionSummary to update
     * @param amount The amount to add
     */
    public static void addInterest(TransactionSummary summary, double amount) {
        summary.setTransactionType("INTEREST_EARNED");
        summary.addTransaction(amount);
    }
    
    /**
     * Helper method for TransactionSummary to add loan disbursement amount
     * 
     * @param summary The TransactionSummary to update
     * @param amount The amount to add
     */
    public static void addLoan(TransactionSummary summary, double amount) {
        summary.setTransactionType("LOAN_DISBURSEMENT");
        summary.addTransaction(amount);
    }
    
    /**
     * Helper method for TransactionSummary to add loan payment amount
     * 
     * @param summary The TransactionSummary to update
     * @param amount The amount to add
     */
    public static void addLoanPayment(TransactionSummary summary, double amount) {
        summary.setTransactionType("LOAN_PAYMENT");
        summary.addTransaction(amount);
    }
    
    /**
     * Check if a member has any transaction activity within a specified number of days
     * 
     * @param memberId The member ID
     * @param days The number of days to check for activity
     * @return True if there is activity, false otherwise
     */
    public static boolean hasMemberActivity(int memberId, int days) {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT COUNT(*) FROM transactions WHERE member_id = ? AND " +
                    "transaction_date >= DATE_SUB(NOW(), INTERVAL ? DAY)";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, memberId);
            stmt.setInt(2, days);
            
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return false;
    }
    
    /**
     * Get the date of the last transaction for a member
     * 
     * @param memberId The member ID
     * @return The date of the last transaction, or null if no transactions
     */
    public static Date getLastTransactionDate(int memberId) {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT MAX(transaction_date) FROM transactions WHERE member_id = ?";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, memberId);
            
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                String dateStr = rs.getString(1);
                if (dateStr != null) {
                    return DateUtils.parseDate(dateStr.substring(0, 10)); // Extract date part
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return null;
    }
    
    /**
     * Get count of active loans in the system
     * 
     * @return The number of active loans
     */
    public static int getActiveLoanCount() {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT COUNT(*) FROM loans WHERE status = 'Active'";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return 0;
    }
    
    /**
     * Get total outstanding loan balance in the system
     * 
     * @return The total outstanding loan balance
     */
    public static double getTotalLoanBalance() {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT SUM(remaining_balance) FROM loans WHERE status = 'Active'";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                return rs.getDouble(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return 0.0;
    }
    
    /**
     * Get count of transactions for today
     * 
     * @return The count of today's transactions
     */
    public static int getTodayTransactionCount() {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT COUNT(*) FROM transactions WHERE DATE(transaction_date) = CURRENT_DATE()";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return 0;
    }
    
    /**
     * Get total amount of transactions for today
     * 
     * @return The total amount of today's transactions
     */
    public static double getTodayTransactionTotal() {
        try (Connection conn = DatabaseManager.getConnection()) {
            String sql = "SELECT SUM(amount) FROM transactions WHERE DATE(transaction_date) = CURRENT_DATE()";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                return rs.getDouble(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return 0.0;
    }
    
    /**
     * Get transaction statistics for dashboard
     * 
     * @return Map containing transaction statistics
     */
    public static Map<String, Object> getTransactionStatistics() {
        Map<String, Object> stats = new HashMap<>();
        
        stats.put("todayCount", getTodayTransactionCount());
        stats.put("todayTotal", getTodayTransactionTotal());
        stats.put("activeLoanCount", getActiveLoanCount());
        stats.put("totalLoanBalance", getTotalLoanBalance());
        
        return stats;
    }
    
    /**
     * Record an interest transaction for a member
     * 
     * @param memberId The member ID
     * @param amount The interest amount
     * @param description The transaction description
     * @param processedBy The username of the processor
     * @return The transaction ID if successful, -1 otherwise
     */
    public static int recordInterest(int memberId, double amount, String description, String processedBy) {
        try (Connection conn = DatabaseManager.getConnection()) {
            // First get the account ID and current balance
            String accountQuery = "SELECT id, savings_balance FROM savings_accounts WHERE member_id = ?";
            PreparedStatement accountStmt = conn.prepareStatement(accountQuery);
            accountStmt.setInt(1, memberId);
            
            ResultSet accountRs = accountStmt.executeQuery();
            
            if (accountRs.next()) {
                int accountId = accountRs.getInt("id");
                double currentBalance = accountRs.getDouble("savings_balance");
                double newBalance = currentBalance + amount;
                
                // Update the savings balance
                String updateQuery = "UPDATE savings_accounts SET savings_balance = ? WHERE id = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
                updateStmt.setDouble(1, newBalance);
                updateStmt.setInt(2, accountId);
                updateStmt.executeUpdate();
                
                // Create the transaction record
                Transaction transaction = new Transaction();
                transaction.setMemberId(memberId);
                transaction.setAccountId(accountId);
                transaction.setTransactionType("INTEREST_EARNED");
                transaction.setAmount(amount);
                transaction.setRunningBalance(newBalance);
                transaction.setDescription(description);
                transaction.setProcessedBy(processedBy);
                transaction.setTransactionDate(LocalDateTime.now());
                
                if (recordTransaction(transaction)) {
                    String idQuery = "SELECT MAX(id) FROM transactions WHERE member_id = ? AND transaction_type = 'INTEREST_EARNED'";
                    PreparedStatement idStmt = conn.prepareStatement(idQuery);
                    idStmt.setInt(1, memberId);
                    
                    ResultSet idRs = idStmt.executeQuery();
                    if (idRs.next()) {
                        return idRs.getInt(1);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return -1;
    }
}